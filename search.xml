<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 学习笔记</title>
    <url>/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>环境 &amp; 教程：<br>  macOS Big Sur 11.2.1（m1）<br>  <a href="https://www.bilibili.com/video/BV1FE411P7B3?from=search&seid=5064085414502491456">学习视频</a></p>
</blockquote>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul>
<li>分布式版本控制: 每个人的电脑都是一个完整的版本库，可离线本地提交，联网时再push，不因服务器损坏或网络问题造成工作停止</li>
</ul>
<h2 id="查看配置-amp-配置基础信息"><a href="#查看配置-amp-配置基础信息" class="headerlink" title="查看配置 &amp; 配置基础信息"></a>查看配置 &amp; 配置基础信息</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">config</span> -l <span class="comment"># 查看所有配置</span></span><br><span class="line">git <span class="built_in">config</span> --system -l <span class="comment"># 系统配置</span></span><br><span class="line">git <span class="built_in">config</span> --global -l <span class="comment"># 全局配置</span></span><br><span class="line">git <span class="built_in">config</span> --user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git <span class="built_in">config</span> --user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<p>我个人的配置文件在<code>~/.gitconfig</code>，其内容与<code>--global</code>查看到的内容一致</p>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">config</span></span><br><span class="line">git <span class="keyword">add </span>. <span class="comment"># 工作区(workspace)--&gt;缓存区(index)</span></span><br><span class="line">git commit <span class="comment"># 缓存区(index)</span></span><br></pre></td></tr></table></figure>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><h4 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">git init [yourfile] <span class="comment"># 文件路径可选，默认在当前文件夹下，此时会创建.git文件夹</span></span><br><span class="line"><span class="comment"># 查看一下方便后续操作</span></span><br><span class="line"><span class="keyword">ls</span> <span class="string">.git</span></span><br></pre></td></tr></table></figure>

<pre><code>HEAD        config      hooks       objects
branches    description info        refs
</code></pre>
<h4 id="克隆远程-remote-仓库"><a href="#克隆远程-remote-仓库" class="headerlink" title="克隆远程(remote)仓库"></a>克隆远程(remote)仓库</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">url</span> [yourfile] <span class="comment"># 文件路径可选，默认到当前文件夹下</span></span><br></pre></td></tr></table></figure>

<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h4><ul>
<li>Untracked <ul>
<li>未跟踪，处于文件夹内但没加入到Git库，不参与版本控制</li>
<li>–<code>git add</code>–&gt; Staged</li>
</ul>
</li>
<li>Unmodify<ul>
<li>已入库未修改</li>
<li>–<code>git rm</code>–&gt; Untracked</li>
</ul>
</li>
<li>Modified<ul>
<li>已修改</li>
<li>–<code>git add</code> Staged</li>
<li>–<code>git checkout</code>丢弃修改–&gt; Untracked</li>
</ul>
</li>
<li>Staged<ul>
<li>暂存状态</li>
<li>–<code>git commit</code>–&gt; Unmodify</li>
<li>–<code>git reset HEAD filename</code>–&gt; Modified</li>
</ul>
</li>
</ul>
<h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight plain"><figcaption><span>.git</span></figcaption><table><tr><td class="code"><pre><span class="line">git status [filename] # 默认所有文件，在新建的本地仓库下使用查看一下结果</span><br></pre></td></tr></table></figure>

<pre><code>On branch master

No commits yet

nothing to commit (create/copy files and use &quot;git add&quot; to track)
</code></pre>
<h4 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span> . <span class="meta"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;消息内容&quot;</span> <span class="meta"># 提交暂存区的内容到本地仓库</span></span><br></pre></td></tr></table></figure>

<h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>将不需要提交的文件加入<code>gitignore</code>文件中<br>文件规则：</p>
<ul>
<li>可采用通配符</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Git &amp; Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Next 踩坑配置记录</title>
    <url>/Hexo%E8%B8%A9%E5%9D%91%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>一番配置后深感付出与时间不成正比，缺乏css知识的情况下更是如此。再者选择Next的主题就是为了精简，故待后续有时间了再做配置更新。</p>
</blockquote>
<p>  以下<code>代码块</code>若未曾指定文件，默认命令行操作</p>
<h1 id="博客操作"><a href="#博客操作" class="headerlink" title="博客操作"></a>博客操作</h1><h2 id="增加新标签页"><a href="#增加新标签页" class="headerlink" title="增加新标签页"></a>增加新标签页</h2><ul>
<li>新增加的界面位于博客主目录下的 source 中</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> tags</span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> categories</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章&quot;</span></span><br></pre></td></tr></table></figure>
<p>此时创建的文章开头默认是没有categories的，设置成默认，打开<code>blog/scaffolds/post.md</code></p>
<figure class="highlight plain"><figcaption><span>blog/scaffolds/post.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>此时修改本地文章内容可以直接刷新界面看到更改 <del>一天后才发现</del> :)</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li>Next官方中文文档配置部分有些不适合更新的版本</li>
<li>中文的 language 设置应当为 zh-CN 而非 zh-Hans</li>
<li>网上大部分配置提到的路径为：<ul>
<li>博客配置文件<code>blog/_config.yml</code></li>
<li>主题配置文件<code>blog/themes/next/_config.yml</code></li>
</ul>
</li>
<li>现可<a href="https://github.com/iissnan/hexo-theme-next/issues/328">统一配置</a>在<code>blog/source/_data/next.yml</code>中，没有该目录则新建<br>将需要改变的地方<code>copy</code>至<code>next.yml</code>即可</li>
</ul>
<h2 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h2><h3 id="设置404界面"><a href="#设置404界面" class="headerlink" title="设置404界面"></a>设置<code>404</code>界面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page 404</span><br></pre></td></tr></table></figure>
<p>自定义<code>blog/source/404/index.md</code>即可</p>
<h3 id="更改代码块颜色"><a href="#更改代码块颜色" class="headerlink" title="更改代码块颜色"></a>更改代码块颜色</h3><p>在<code>blog/themes/next/source/css/_variables/base.styl</code>进行修改</p>
<h3 id="设置命令行快捷键以同步仓库"><a href="#设置命令行快捷键以同步仓库" class="headerlink" title="设置命令行快捷键以同步仓库"></a>设置命令行快捷键以同步仓库</h3><ul>
<li>因为没什么时间再去看别人博客学习更方便的同步方法，先挖个坑下半年再说<br>Mac系统<code>open -a xcode ~/.zshrc</code>，会vim用vim<br>将以下内容添加至<code>zsh</code>配置文件，<code>bash</code>一样，<code>alias</code>后是别名的设置，按自己需求改个顺手的就行</li>
</ul>
<figure class="highlight shell"><figcaption><span>~/.zshrc</span></figcaption><table><tr><td class="code"><pre><span class="line">alias bls=&quot;ls -h ~/Blog/source/_posts&quot; # 查看 blog 已有文章</span><br><span class="line">alias bv=&quot;vim ~/Blog/source/_posts&quot; # 编辑文章</span><br><span class="line">alias rab=&quot;ra ~/Blog/source/_posts&quot; # 利用 ranger 查看文件并打开，需下载 ranger，并设置别名 ra</span><br><span class="line">alias hn=&quot;</span><br><span class="line">cd ~/Blog # 创建文章</span><br><span class="line">hexo n &quot;</span><br><span class="line">alias hd=&quot; # 同步仓库</span><br><span class="line">cd ~/Blog</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">cd -</span><br><span class="line">&quot;</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure>


<h3 id="交换归档和首页的索引"><a href="#交换归档和首页的索引" class="headerlink" title="交换归档和首页的索引"></a>交换归档和首页的索引</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">archive_dir:</span> <span class="string">/</span> <span class="comment"># archives</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;archives&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="主题自带简单配置"><a href="#主题自带简单配置" class="headerlink" title="主题自带简单配置"></a>主题自带简单配置</h2><h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>创建文件夹存放图片</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span> <span class="comment"># 确认一下现在是否在博客目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line">mkdir images</span><br></pre></td></tr></table></figure>

<p>把图片放置在blog/source/images目录下</p>
<figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">url：/images/yourimage.jpg</span></span><br><span class="line"><span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment"># 修改头像图片为圆形</span></span><br><span class="line"><span class="comment"># opacity # 控制头像透明度 0-1</span></span><br><span class="line"><span class="attr">rotated:</span> <span class="literal">false</span> <span class="comment"># 鼠标移至是否会旋转</span></span><br></pre></td></tr></table></figure>

<h3 id="打开代码块复制功能"><a href="#打开代码块复制功能" class="headerlink" title="打开代码块复制功能"></a>打开代码块复制功能</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="关闭右下角back-to-top功能"><a href="#关闭右下角back-to-top功能" class="headerlink" title="关闭右下角back to top功能"></a>关闭右下角<code>back to top</code>功能</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="网站开始时间"><a href="#网站开始时间" class="headerlink" title="网站开始时间"></a>网站开始时间</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span></span><br></pre></td></tr></table></figure>
<h3 id="修改文章底部tags标识-gt-图标"><a href="#修改文章底部tags标识-gt-图标" class="headerlink" title="修改文章底部tags标识#-&gt;图标"></a>修改文章底部<code>tags</code>标识<code>#</code>-&gt;图标</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="增加字数统计-amp-时长估计"><a href="#增加字数统计-amp-时长估计" class="headerlink" title="增加字数统计 &amp; 时长估计"></a>增加字数统计 &amp; 时长估计</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


<h3 id="增加相关文章功能"><a href="#增加相关文章功能" class="headerlink" title="增加相关文章功能"></a>增加相关文章功能</h3><p>回到博客根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>


<figure class="highlight yml"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="comment"># 默认为相关文章</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Tips: 该功能以<code>tags</code>为参考</p>
<h3 id="关闭侧栏目录数字编号"><a href="#关闭侧栏目录数字编号" class="headerlink" title="关闭侧栏目录数字编号"></a>关闭侧栏目录数字编号</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span>  <span class="comment"># 关闭目录中的数字编号</span></span><br></pre></td></tr></table></figure>
<h3 id="icon-替换"><a href="#icon-替换" class="headerlink" title="icon 替换"></a>icon 替换</h3><p>去 <a href="http://www.fontawesome.com.cn/faicons/">Font Awesome 官网</a> 找对应代码</p>
<h3 id="关闭动态效果"><a href="#关闭动态效果" class="headerlink" title="关闭动态效果"></a>关闭动态效果</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="string">enable:false</span></span><br></pre></td></tr></table></figure>

<h1 id="搭建参考"><a href="#搭建参考" class="headerlink" title="搭建参考"></a>搭建参考</h1><p><a href="https://www.jianshu.com/p/f054333ac9e6">hexo的next主题个性化教程:打造炫酷网站</a><br><a href="http://theme-next.iissnan.com/">Next官方中文文档</a><br><a href="https://theme-next.js.org/">next官方文档</a></p>
<p><a href="https://guanqr.com/tech/website/hexo-theme-next-customization">Hexo-NexT 主题个性优化</a><br><a href="http://yearito.cn/posts/hexo-get-started.html">Hexo 搭建个人博客系列：基础建站篇</a></p>
]]></content>
      <categories>
        <category>配置</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 随笔&amp;项目</title>
    <url>/Python%E9%9A%8F%E7%AC%94&amp;%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<blockquote>
<p>强烈建议在<code>Jupyter</code>中调试运行<br>  以下一个代码块为一个<code>Cell</code><br>  文章内容较多情况下建议<code>Ctrl+f</code>/<code>Command+f</code>查询跳转，或目录概览</p>
</blockquote>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><h2 id="字符串对齐格式的运用"><a href="#字符串对齐格式的运用" class="headerlink" title="字符串对齐格式的运用"></a>字符串对齐格式的运用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个非常棒的想法</span></span><br><span class="line"><span class="comment"># 第一次 format() 以自定义长度</span></span><br><span class="line"></span><br><span class="line">width = <span class="number">35</span></span><br><span class="line">price_width = <span class="number">10</span></span><br><span class="line">item_width = width - price_width</span><br><span class="line">header_fmt = <span class="string">&#x27;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(item_width, price_width)</span><br><span class="line">fmt = <span class="string">&#x27;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;.2f&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(item_width, price_width)</span><br><span class="line">print(<span class="string">&quot;在此可以发现上面多个&#123;&#125;的妙用，目的是实现自定义长度的功能\n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;fmt =&quot;</span>,fmt)</span><br><span class="line">print(header_fmt.<span class="built_in">format</span>(<span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">print(<span class="string">&quot;-&quot;</span> * width)</span><br><span class="line">print(fmt.<span class="built_in">format</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h2 id="dict-关于copy-amp-deepcopy"><a href="#dict-关于copy-amp-deepcopy" class="headerlink" title="dict 关于copy &amp; deepcopy"></a>dict 关于copy &amp; deepcopy</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浅拷贝时，复制字典项，字典值仍指向原件`p</span></span><br><span class="line"><span class="comment"># 深拷贝全部复制</span></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line">item = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:[<span class="number">1</span>]&#125;</span><br><span class="line">item_c = item.copy()</span><br><span class="line">item_dc = deepcopy(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># is查看是否是同一个对象，用id()查看效果一样</span></span><br><span class="line"><span class="comment"># tips:尽量不将 is 用于不可变对象上</span></span><br><span class="line"><span class="comment"># 对于不可变的对象，即便是深拷贝也是指向同一个对象</span></span><br><span class="line">print(item[<span class="string">&#x27;a&#x27;</span>] <span class="keyword">is</span> item_c[<span class="string">&#x27;a&#x27;</span>]) </span><br><span class="line">print(item[<span class="string">&#x27;a&#x27;</span>] <span class="keyword">is</span> item_dc[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">print(item[<span class="string">&#x27;b&#x27;</span>] <span class="keyword">is</span> item_dc[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">id</span>(item[<span class="string">&#x27;a&#x27;</span>]) == <span class="built_in">id</span>(item_dc[<span class="string">&#x27;a&#x27;</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>True
True
False
True
</code></pre>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="简单匹配一个密码，未对特殊字符的存在做判断"><a href="#简单匹配一个密码，未对特殊字符的存在做判断" class="headerlink" title="简单匹配一个密码，未对特殊字符的存在做判断"></a>简单匹配一个密码，未对特殊字符的存在做判断</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">password_check</span>(<span class="params">password</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(password) &lt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    strengthRegex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[a-zA-]+&#x27;</span>)   <span class="comment"># 至少有一个字母</span></span><br><span class="line">    <span class="keyword">if</span> strengthRegex.search(password) == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    strengthRegex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)         <span class="comment"># 至少有一个数字</span></span><br><span class="line">    <span class="keyword">if</span> strengthRegex.search(password) == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">print(password_check(<span class="string">&#x27;avsa1&#x27;</span>))</span><br><span class="line">print(password_check(<span class="string">&#x27;sadaskjdh1&#x27;</span>))</span><br><span class="line">print(password_check(<span class="string">&#x27;sadaskjdh1好&#x27;</span>))</span><br></pre></td></tr></table></figure>
<pre><code>False
True
True
</code></pre>
<h3 id="可不捕获当前括号的内容"><a href="#可不捕获当前括号的内容" class="headerlink" title="?: 可不捕获当前括号的内容"></a>?: 可不捕获当前括号的内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 正则表达式 ?: 可不捕获当前括号的内容</span></span><br><span class="line">regex1 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(Chapter)[ ]?([1-9][0-9]&#123;0,1&#125;)&#x27;</span>)</span><br><span class="line">regex2 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(?:Chapter)[ ]?([1-9][0-9]&#123;0,1&#125;)&#x27;</span>)</span><br><span class="line">print(regex1.search(<span class="string">&#x27;Chapter 12&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">print(regex2.search(<span class="string">&#x27;Chapter 12&#x27;</span>)[<span class="number">1</span>]) <span class="comment"># 不捕获 Chapter</span></span><br></pre></td></tr></table></figure>
<pre><code>Chapter
12
</code></pre>
<h3 id="正则表达式所捕获的分组下标计算：每遇到一个左括号-1"><a href="#正则表达式所捕获的分组下标计算：每遇到一个左括号-1" class="headerlink" title="正则表达式所捕获的分组下标计算：每遇到一个左括号 +1"></a>正则表达式所捕获的分组下标计算：每遇到一个左括号 +1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面分组[1]为第一个括号（大括号而非数学运算中最优先计算的那个 innermost）</span></span><br><span class="line">a = re.<span class="built_in">compile</span>(<span class="string">&#x27;((\d)+.)(\d)*&#x27;</span>)</span><br><span class="line">print(a.search(<span class="string">&#x27;1123.22&#x27;</span>)[<span class="number">3</span>])</span><br><span class="line">a.search(<span class="string">&#x27;1123.22&#x27;</span>)[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<pre><code>&#39;2&#39;
</code></pre>
<h2 id="引发异常"><a href="#引发异常" class="headerlink" title="引发异常"></a>引发异常</h2><p><code>raise Exception()/NameError()/TypeError()/ValueError()...</code>可控制程序引发异常，以下是一段示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> number &lt; <span class="number">2</span>:</span><br><span class="line">  <span class="keyword">raise</span> Exception(<span class="string">&#x27;Number should be greater than 2&#x27;</span>)</span><br><span class="line">print(number + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>-1
----------------------------------------------------------
Exception                Traceback (most recent call last)
&lt;ipython-input-78-b9dd2aaf2f3d&gt; in &lt;module&gt;
  1 number = int(input())
  2 if number &lt; 0:
----&gt; 3   raise Exception(&#39;Number should be greater than 2&#39;)
  4 print(number + 1)

Exception: Number should be greater than 2
</code></pre>
<h2 id="断言assert"><a href="#断言assert" class="headerlink" title="断言assert"></a>断言assert</h2><p>其运行机制与<code>if [not true]: raise Exception()</code>很像，引发AssertionError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">always_error</span>():</span></span><br><span class="line">  <span class="keyword">assert</span> <span class="literal">False</span>, <span class="string">&#x27;This assertion will be always triggered&#x27;</span></span><br><span class="line"></span><br><span class="line">always_error()</span><br></pre></td></tr></table></figure>
<h2 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h2><p>返回的参数与命令行运行文件时文件名及其之后的参数一致</p>
<figure class="highlight python"><figcaption><span>get_argv.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命令行下运行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 get_argv.py first second third,fourth</span><br></pre></td></tr></table></figure>

<pre><code>[&#39;get_argv.py&#39;, &#39;first&#39;, &#39;second&#39;, &#39;third,fourth&#39;]
</code></pre>
<p>可以看到第一个参数为文件名，之后的参数以<code>空格</code>分割，而非<code>,</code></p>
<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="Python-编程快速上手"><a href="#Python-编程快速上手" class="headerlink" title="Python 编程快速上手"></a>Python 编程快速上手</h2><h3 id="9-4：将美国风格的日期文件改成欧洲风格"><a href="#9-4：将美国风格的日期文件改成欧洲风格" class="headerlink" title="9.4：将美国风格的日期文件改成欧洲风格"></a>9.4：将美国风格的日期文件改成欧洲风格</h3><blockquote>
<p><code>MM-DD-YYYY</code> -&gt; <code>DD-MM-YYYY</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># Get current dir of work</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cwd = os.path.abspath(</span><br><span class="line">        <span class="built_in">input</span>(<span class="string">&#x27;Input your current directory of work:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(cwd):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List files</span></span><br><span class="line"><span class="comment"># for foldername, subfolders, filenames in os.walk(cwd):</span></span><br><span class="line"><span class="comment">#     print(foldername,subfolders,filenames)</span></span><br><span class="line">filenames = [filename <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(cwd)]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create regex and replace MM &lt;-&gt; DD</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">data_regex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(\d\d)-(\d\d)-(\d\d\d\d.?[a-zA-Z]&#123;0,3&#125;)&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">    data = data_regex.search(filename)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        new_filename = <span class="string">&#x27;-&#x27;</span>.join([data[<span class="number">2</span>], data[<span class="number">1</span>], data[<span class="number">3</span>]])</span><br><span class="line">        <span class="comment"># 在运行重命名的代码前，最好先做个test</span></span><br><span class="line">        print(<span class="string">&#x27;Rename &quot;%s&quot; to &quot;%s&quot;&#x27;</span> % (os.path.join(cwd, filename), os.path.join(cwd, new_filename)))</span><br><span class="line">        <span class="comment"># uncomment after testing</span></span><br><span class="line">        <span class="comment">#         try:</span></span><br><span class="line">        <span class="comment">#             shutil.move(os.path.join(cwd,filename), os.path.join(cwd,new_filename))</span></span><br><span class="line">        <span class="comment">#         except:</span></span><br><span class="line">        <span class="comment">#             break</span></span><br><span class="line">        <span class="comment">#         datas.append(data_regex.findall(filename))</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="9-5-打包文件夹"><a href="#9-5-打包文件夹" class="headerlink" title="9.5: 打包文件夹"></a>9.5: 打包文件夹</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 打包文件，基于Python标准库</span></span><br><span class="line"><span class="comment"># shutil.make_archive(base_name, format [, root_dir[, base_dir[, owner[, group[,logger ]]]]]]])</span></span><br><span class="line"><span class="comment"># base_name指定生成的文件名 or 文件路径，默认在当前文件夹下，去除扩展名</span></span><br><span class="line"><span class="comment"># format：归档格式，root_dir 可指定目录路径，base_dir可指定文件/目录路径（默认可以基于root_dir扩展）</span></span><br><span class="line"><span class="comment"># dry_run=True，则不会创建归档文件，但将要被执行的操作会被记录到 logger</span></span><br><span class="line"><span class="comment"># owner 和 group 将在创建 tar 归档文件时被使用。默认会使用当前的所有者和分组</span></span><br><span class="line"><span class="comment"># logger 必须是一个兼容 PEP 282 的对象，通常为logging.Logger 的实例</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">shutil.make_archive(<span class="string">&#x27;output_filename&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>,<span class="string">&#x27;dir_name&#x27;</span>,<span class="string">&#x27;file_name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该<a href="http://www.seanbehan.com/how-to-use-python-shutil-make_archive-to-zip-up-a-directory-recursively-including-the-root-folder/">链接</a>可加深<code>shutil.make_archive()</code>理解</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_archive</span>(<span class="params">source, destination</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;让make_archive更易于使用&#x27;&#x27;&#x27;</span></span><br><span class="line">    base = os.path.basename(destination)</span><br><span class="line">    name = base.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">format</span> = base.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    archive_from = os.path.dirname(source)</span><br><span class="line">    archive_to = os.path.basename(source.strip(os.sep))</span><br><span class="line">    print(source, destination, archive_from, archive_to)</span><br><span class="line">    shutil.make_archive(name, <span class="built_in">format</span>, archive_from, archive_to)</span><br><span class="line">    shutil.move(<span class="string">&#x27;%s.%s&#x27;</span>%(name,<span class="built_in">format</span>), destination)</span><br><span class="line"></span><br><span class="line">make_archive(<span class="string">&#x27;/path/to/folder&#x27;</span>, <span class="string">&#x27;/path/to/folder.zip&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="11-1-通过命令行进行谷歌地图检索"><a href="#11-1-通过命令行进行谷歌地图检索" class="headerlink" title="11.1 通过命令行进行谷歌地图检索"></a>11.1 通过命令行进行谷歌地图检索</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># 命令行打开谷歌地图搜索地名，解决中文地名方法源于：</span></span><br><span class="line"><span class="comment"># https://www.ptt.cc/bbs/Python/M.1566904299.A.076.html</span></span><br><span class="line"><span class="comment"># https://www.urlencoder.io/python/</span></span><br><span class="line"><span class="comment"># usage: python3 mapIt.py &#x27;地名&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    address = urllib.parse.quote(<span class="string">&#x27; &#x27;</span>.join(sys.argv[<span class="number">1</span>:]))</span><br><span class="line">    webbrowser.<span class="built_in">open</span>(<span class="string">&#x27;https://www.google.com/maps/place/&#x27;</span> + address)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于<code>urllib.parse</code>模块</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment">## 使用urllib.parse模块把中文转换成可被识别的模式，若不导入该模块，则不能查中文地名</span></span><br><span class="line"><span class="comment"># urllib.parse.quote(string, safe=’/’, encoding=None, errors=None)</span></span><br><span class="line"><span class="comment"># safe指定不转码的字符，默认&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">print(urllib.parse.quote(<span class="string">&#x27;/中国&#x27;</span>))</span><br><span class="line">print(urllib.parse.quote(<span class="string">&#x27;/中国&#x27;</span>,safe=<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;/中国&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<pre><code>/%E4%B8%AD%E5%9B%BD
%2F%E4%B8%AD%E5%9B%BD
b&#39;/\xe4\xb8\xad\xe5\x9b\xbd&#39;
</code></pre>
]]></content>
      <categories>
        <category>Book</category>
        <category>Python 编程快速上手 &amp; Python 基础教程</category>
        <category>随笔 &amp; 项目</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 快捷键配置</title>
    <url>/vim%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://share.mubu.com/doc/4pdz28M5dkx/#m">Vim命令笔记 by 幕布</a></p>
<p>使用<code>:help keycodes</code>查看Vim按键对应格式，如<code>空格</code>对应<code>&lt;space&gt;</code></p>
<h2 id="小心命令的自循环"><a href="#小心命令的自循环" class="headerlink" title="小心命令的自循环"></a>小心命令的自循环</h2><p>最近在进行Python的学习，写Markdown时经常要使用Python代码块，故想给Vim配置一个快捷键，让<code>`p</code>映射为<code>```python...</code>。</p>
<figure class="highlight vim"><figcaption><span>.vim/vimrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">imap</span> `<span class="keyword">p</span> ```<span class="keyword">python</span><span class="symbol">&lt;CR&gt;</span>```<span class="symbol">&lt;UP&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>
<p>保存后使用发现直接卡死，改了几次命令发现应该是因为<code>`python</code>同样触发了<code>`p</code>，而且实际上这样也无法实现想要的效果，于是修改配置：</p>
<figure class="highlight vim"><figcaption><span>.vim/vimrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">imap</span> `<span class="keyword">p</span> ```<span class="symbol">&lt;CR&gt;</span>```<span class="symbol">&lt;UP&gt;</span><span class="symbol">&lt;Space&gt;</span><span class="keyword">python</span><span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改成功，在<code>```</code>和<code>[language]</code>中间不加空格的话删除<code>&lt;Space&gt;</code>即可</p>
]]></content>
      <categories>
        <category>配置</category>
        <category>vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>计网学习笔记</title>
    <url>/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li>以下分节源于计算机网络自顶向下方法第七版</li>
</ul>
<span id="more"></span>

<p><a href="https://share.mubu.com/doc/688byd3Mrlx/#m">计网笔记 by 幕布</a></p>
<h1 id="1-计算机网络和因特网"><a href="#1-计算机网络和因特网" class="headerlink" title="1 计算机网络和因特网"></a>1 计算机网络和因特网</h1><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><pre><code>主机即端系统
</code></pre>
<h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2><pre><code>DSL：通过本地电话网联网，即拨号上网
HFC：混合光纤同轴
FTTH：光纤到户
</code></pre>
<p>  无线接入<br>    wifi 3g/4g</p>
<h2 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h2><pre><code>电路交换
    TDM：时分多路复用
    FDM：频分多路复用
IXP
</code></pre>
<p>汇合点，多个ISP在这里对等</p>
<h2 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h2><pre><code>传播速率
    1B = 8 b
    2Mbps = 0.25MBps
    此时传输 4MB 文件需要 4 / 0.25 = 16s
    可以直接 (4 * 8) / 2 进行计算
    若采用分组交换的方式，R1=2Mbps，R2=1Mpbs，则传输4MB分组则需要 16+32=48s
    若比特一到达便转发，则需要 16s
端到端时延要么只算发出，要么只算接收，不用两个一起算
带宽时延积：（Bandwidth-Delay Product ，BDP）即链路上的最大比特数，也称以比特为单位的链路长度。
计算方法：
Bandwidth-Delay Product = delay*bandwidth
传播时延 * 数据流量速度的值 可以直观的理解为一条线路上跑满bit的场景
    百度百科中有一个词非常形象的加深了我的理解：长胖网络（long fat network，简写为LFN，经常发音为“elephen”）
        一个具有大带宽时延乘积的网络（长&amp;胖，形象生动）
</code></pre>
<h2 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h2><pre><code>PDU
    应用层报文：应用要发送并传递到传输层的数据
    传输层报文段：由传输层生成，并用传输层头封装应用层消息
    网络层数据报：将传输层段与网络层报头封装在一起
    链路层帧：用链路层头封装网络层数据报
存储转发下报文分段的好处
    对于原来很大的报文，在其完全被接受之前，无法转发
    若将其分段，就算仅仅是两段，也可以做到在接受第二段报文的期间转发第一段报文
    [实验地址](https://media.pearsoncmg.com/ph/esm/ecs_kurose_compnetwork_8/cw/content/interactiveanimations/message-segmentation/index.html)
</code></pre>
<h1 id="2-应用层"><a href="#2-应用层" class="headerlink" title="2 应用层"></a>2 应用层</h1><h2 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h2>]]></content>
      <categories>
        <category>Book</category>
        <category>计算机网络自顶向下</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
