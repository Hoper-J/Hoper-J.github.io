<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python 随笔&amp;项目</title>
    <url>/Python%E9%9A%8F%E7%AC%94%E5%92%8C%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<blockquote>
<p>强烈建议在<code>Jupyter</code>中调试运行<br>  以下一个代码块为一个<code>Cell</code><br>  文章内容较多情况下建议<code>Ctrl+f</code>/<code>Command+f</code>查询跳转，或目录概览<br>  参考书籍 &amp; 资料:<br>《Python编程快速上手》<br>《Python基础教程(第三版)》<br>《Python标准库参考》</p>
</blockquote>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><h2 id="字符串对齐格式的运用"><a href="#字符串对齐格式的运用" class="headerlink" title="字符串对齐格式的运用"></a>字符串对齐格式的运用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个非常棒的想法</span></span><br><span class="line"><span class="comment"># 第一次 format() 以自定义长度</span></span><br><span class="line"></span><br><span class="line">width = <span class="number">35</span></span><br><span class="line">price_width = <span class="number">10</span></span><br><span class="line">item_width = width - price_width</span><br><span class="line">header_fmt = <span class="string">&#x27;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(item_width, price_width)</span><br><span class="line">fmt = <span class="string">&#x27;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;.2f&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(item_width, price_width)</span><br><span class="line">print(<span class="string">&quot;在此可以发现上面多个&#123;&#125;的妙用，目的是实现自定义长度的功能\n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;fmt =&quot;</span>,fmt)</span><br><span class="line">print(header_fmt.<span class="built_in">format</span>(<span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;price&#x27;</span>))</span><br><span class="line">print(<span class="string">&quot;-&quot;</span> * width)</span><br><span class="line">print(fmt.<span class="built_in">format</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h2 id="dict-关于copy-amp-deepcopy"><a href="#dict-关于copy-amp-deepcopy" class="headerlink" title="dict 关于copy &amp; deepcopy"></a>dict 关于copy &amp; deepcopy</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浅拷贝时，复制字典项，字典值仍指向原件`p</span></span><br><span class="line"><span class="comment"># 深拷贝全部复制</span></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line">item = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:[<span class="number">1</span>]&#125;</span><br><span class="line">item_c = item.copy()</span><br><span class="line">item_dc = deepcopy(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># is查看是否是同一个对象，用id()查看效果一样</span></span><br><span class="line"><span class="comment"># tips:尽量不将 is 用于不可变对象上</span></span><br><span class="line"><span class="comment"># 对于不可变的对象，即便是深拷贝也是指向同一个对象</span></span><br><span class="line">print(item[<span class="string">&#x27;a&#x27;</span>] <span class="keyword">is</span> item_c[<span class="string">&#x27;a&#x27;</span>]) </span><br><span class="line">print(item[<span class="string">&#x27;a&#x27;</span>] <span class="keyword">is</span> item_dc[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">print(item[<span class="string">&#x27;b&#x27;</span>] <span class="keyword">is</span> item_dc[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">id</span>(item[<span class="string">&#x27;a&#x27;</span>]) == <span class="built_in">id</span>(item_dc[<span class="string">&#x27;a&#x27;</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>True
True
False
True
</code></pre>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="简单匹配一个密码，未对特殊字符的存在做判断"><a href="#简单匹配一个密码，未对特殊字符的存在做判断" class="headerlink" title="简单匹配一个密码，未对特殊字符的存在做判断"></a>简单匹配一个密码，未对特殊字符的存在做判断</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">password_check</span>(<span class="params">password</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(password) &lt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    strengthRegex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[a-zA-]+&#x27;</span>)   <span class="comment"># 至少有一个字母</span></span><br><span class="line">    <span class="keyword">if</span> strengthRegex.search(password) == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    strengthRegex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)         <span class="comment"># 至少有一个数字</span></span><br><span class="line">    <span class="keyword">if</span> strengthRegex.search(password) == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">print(password_check(<span class="string">&#x27;avsa1&#x27;</span>))</span><br><span class="line">print(password_check(<span class="string">&#x27;sadaskjdh1&#x27;</span>))</span><br><span class="line">print(password_check(<span class="string">&#x27;sadaskjdh1好&#x27;</span>))</span><br></pre></td></tr></table></figure>
<pre><code>False
True
True
</code></pre>
<h3 id="可不捕获当前括号的内容"><a href="#可不捕获当前括号的内容" class="headerlink" title="?: 可不捕获当前括号的内容"></a>?: 可不捕获当前括号的内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 正则表达式 ?: 可不捕获当前括号的内容</span></span><br><span class="line">regex1 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(Chapter)[ ]?([1-9][0-9]&#123;0,1&#125;)&#x27;</span>)</span><br><span class="line">regex2 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(?:Chapter)[ ]?([1-9][0-9]&#123;0,1&#125;)&#x27;</span>)</span><br><span class="line">print(regex1.search(<span class="string">&#x27;Chapter 12&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">print(regex2.search(<span class="string">&#x27;Chapter 12&#x27;</span>)[<span class="number">1</span>]) <span class="comment"># 不捕获 Chapter</span></span><br></pre></td></tr></table></figure>
<pre><code>Chapter
12
</code></pre>
<h3 id="正则表达式所捕获的分组下标计算：每遇到一个左括号-1"><a href="#正则表达式所捕获的分组下标计算：每遇到一个左括号-1" class="headerlink" title="正则表达式所捕获的分组下标计算：每遇到一个左括号 +1"></a>正则表达式所捕获的分组下标计算：每遇到一个左括号 +1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面分组[1]为第一个括号（大括号而非数学运算中最优先计算的那个 innermost）</span></span><br><span class="line">a = re.<span class="built_in">compile</span>(<span class="string">&#x27;((\d)+.)(\d)*&#x27;</span>)</span><br><span class="line">print(a.search(<span class="string">&#x27;1123.22&#x27;</span>)[<span class="number">3</span>])</span><br><span class="line">a.search(<span class="string">&#x27;1123.22&#x27;</span>)[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<pre><code>&#39;2&#39;
</code></pre>
<h2 id="引发异常"><a href="#引发异常" class="headerlink" title="引发异常"></a>引发异常</h2><p><code>raise Exception()/NameError()/TypeError()/ValueError()...</code>可控制程序引发异常，以下是一段示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> number &lt; <span class="number">2</span>:</span><br><span class="line">  <span class="keyword">raise</span> Exception(<span class="string">&#x27;Number should be greater than 2&#x27;</span>)</span><br><span class="line">print(number + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>-1
----------------------------------------------------------
Exception                Traceback (most recent call last)
&lt;ipython-input-78-b9dd2aaf2f3d&gt; in &lt;module&gt;
  1 number = int(input())
  2 if number &lt; 0:
----&gt; 3   raise Exception(&#39;Number should be greater than 2&#39;)
  4 print(number + 1)

Exception: Number should be greater than 2
</code></pre>
<h2 id="断言assert"><a href="#断言assert" class="headerlink" title="断言assert"></a>断言assert</h2><p>其运行机制与<code>if [not true]: raise Exception()</code>很像，引发AssertionError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">always_error</span>():</span></span><br><span class="line">  <span class="keyword">assert</span> <span class="literal">False</span>, <span class="string">&#x27;This assertion will be always triggered&#x27;</span></span><br><span class="line"></span><br><span class="line">always_error()</span><br></pre></td></tr></table></figure>
<h2 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h2><p>返回的参数与命令行运行文件时文件名及其之后的参数一致</p>
<figure class="highlight python"><figcaption><span>get_argv.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命令行下运行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 get_argv.py first second third,fourth</span><br></pre></td></tr></table></figure>

<pre><code>[&#39;get_argv.py&#39;, &#39;first&#39;, &#39;second&#39;, &#39;third,fourth&#39;]
</code></pre>
<p>可以看到第一个参数为文件名，之后的参数以<code>空格</code>分割，而非<code>,</code></p>
<h2 id="通过带星号的参数优雅的处理参数过多"><a href="#通过带星号的参数优雅的处理参数过多" class="headerlink" title="通过带星号的参数优雅的处理参数过多"></a>通过带星号的参数优雅的处理参数过多</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y,*others</span>):</span></span><br><span class="line">  <span class="keyword">if</span> others:</span><br><span class="line">    print(<span class="string">&#x27;输入的参数过多，只对前两个进行计算&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<pre><code>输入的参数过多，只对前两个进行计算
3
</code></pre>
<h2 id="查看作用域"><a href="#查看作用域" class="headerlink" title="查看作用域"></a>查看作用域</h2><p>vars() &amp; locals() 皆可查看当前作用域<br>但注意，在函数内进行修改似乎并不能改变当时局部变量的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">  b = <span class="number">2</span></span><br><span class="line">  print(<span class="built_in">vars</span>())</span><br><span class="line">  <span class="built_in">vars</span>()[<span class="string">&#x27;b&#x27;</span>] = <span class="number">3</span></span><br><span class="line">  <span class="built_in">locals</span>()[<span class="string">&#x27;b&#x27;</span>] = <span class="number">3</span></span><br><span class="line">  print(b)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<pre><code>&#123;&#39;b&#39;: 2&#125;
2
</code></pre>
<p>Tips: globals() 可查看全局作用域，并可以在函数内修改，在函数内使用<code>global</code>关联全局变量时，对其做的操作会影响到全局变量</p>
<h2 id="关于-iterable对象"><a href="#关于-iterable对象" class="headerlink" title="关于 iterable对象"></a>关于 iterable对象</h2><blockquote>
<p>能一次返回其中一个成员的对象<br>检测一个对象是否是iterable 的唯一可信赖的方法是调用 iter(obj)</p>
</blockquote>
<h2 id="map-amp-filter-amp-reduce"><a href="#map-amp-filter-amp-reduce" class="headerlink" title="map() &amp; filter() &amp; reduce()"></a>map() &amp; filter() &amp; reduce()</h2><p>map() 和 filter() 基本都可通过列表推导 (List Comprehension) 替代实现<br>引用摘自<code>Python标准库参考</code>，务必先有iterable概念再去理解，或者跳过看后面</p>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><blockquote>
<p>map(function, iterable, …)<br>返回一个将 function 应用于 iterable 中每一项并输出其结果的迭代器。如果传入了额外的 iterable 参数，function 必须接受相同个数的实参并被应用于从所有可迭代对象中并行获取的项。当有多个可迭代对象时，最短的可迭代对象耗尽则整个迭代就将结束。</p>
</blockquote>
<p>以列表为例，翻译一下就是对list对象中的每个元素调用function，最终返回一个iterable对象，可以通过list()将其变为list对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">10</span>))) <span class="comment"># 等价于[str(i) for i in range(10)]</span></span><br></pre></td></tr></table></figure>
<pre><code>[&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;]
</code></pre>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><blockquote>
<p>filter(function, iterable)<br>用 iterable 中函数 function 返回真的那些元素，构建一个新的迭代器。iterable 可以是一个序列，一个支 持迭代的容器，或一个迭代器。如果 function 是 None ，则会假设它是一个身份函数，即 iterable 中所有返回假的元素会被移除。</p>
</blockquote>
<p>filter() 如其名，当成对iterable对象对过滤器理解即可，对对象中的每个元素调用function函数，返回其中结果为真的那些元素，若function=None，则过滤掉本身是假的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">0</span>,[],&#123;&#125;,<span class="number">3</span>,<span class="number">4</span>])) <span class="comment"># 等价于[i for i in [1,2,&#x27;&#x27;,0,[],&#123;&#125;,3,4] if i]</span></span><br></pre></td></tr></table></figure>
<pre><code>[1,2,3,4]
</code></pre>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><blockquote>
<p>reduce(function, iterable[, initializer ])<br>将两个参数的 function 从左至右积累地应用到 iterable 的条目，以便将该可迭代对象缩减为单一的值。例如，reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) 是计算 ((((1+2)+3)+4)+5) 的值。左边的参数 x 是积累值而右边的参数 y 则是来自 iterable 的更新值</p>
</blockquote>
<h4 id="lambda-匿名内联函数"><a href="#lambda-匿名内联函数" class="headerlink" title="lambda 匿名内联函数"></a>lambda 匿名内联函数</h4><p>语法为: lambda [参数]: [表达式]</p>
<p>可与map(), filter(), reduce() 结合使用</p>
<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="Python-编程快速上手"><a href="#Python-编程快速上手" class="headerlink" title="Python 编程快速上手"></a>Python 编程快速上手</h2><h3 id="9-4：将美国风格的日期文件改成欧洲风格"><a href="#9-4：将美国风格的日期文件改成欧洲风格" class="headerlink" title="9.4：将美国风格的日期文件改成欧洲风格"></a>9.4：将美国风格的日期文件改成欧洲风格</h3><blockquote>
<p><code>MM-DD-YYYY</code> -&gt; <code>DD-MM-YYYY</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># Get current dir of work</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cwd = os.path.abspath(</span><br><span class="line">        <span class="built_in">input</span>(<span class="string">&#x27;Input your current directory of work:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(cwd):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List files</span></span><br><span class="line"><span class="comment"># for foldername, subfolders, filenames in os.walk(cwd):</span></span><br><span class="line"><span class="comment">#     print(foldername,subfolders,filenames)</span></span><br><span class="line">filenames = [filename <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(cwd)]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create regex and replace MM &lt;-&gt; DD</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">data_regex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(\d\d)-(\d\d)-(\d\d\d\d.?[a-zA-Z]&#123;0,3&#125;)&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">    data = data_regex.search(filename)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        new_filename = <span class="string">&#x27;-&#x27;</span>.join([data[<span class="number">2</span>], data[<span class="number">1</span>], data[<span class="number">3</span>]])</span><br><span class="line">        <span class="comment"># 在运行重命名的代码前，最好先做个test</span></span><br><span class="line">        print(<span class="string">&#x27;Rename &quot;%s&quot; to &quot;%s&quot;&#x27;</span> % (os.path.join(cwd, filename), os.path.join(cwd, new_filename)))</span><br><span class="line">        <span class="comment"># uncomment after testing</span></span><br><span class="line">        <span class="comment">#         try:</span></span><br><span class="line">        <span class="comment">#             shutil.move(os.path.join(cwd,filename), os.path.join(cwd,new_filename))</span></span><br><span class="line">        <span class="comment">#         except:</span></span><br><span class="line">        <span class="comment">#             break</span></span><br><span class="line">        <span class="comment">#         datas.append(data_regex.findall(filename))</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="9-5-打包文件夹"><a href="#9-5-打包文件夹" class="headerlink" title="9.5: 打包文件夹"></a>9.5: 打包文件夹</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 打包文件，基于Python标准库</span></span><br><span class="line"><span class="comment"># shutil.make_archive(base_name, format [, root_dir[, base_dir[, owner[, group[,logger ]]]]]]])</span></span><br><span class="line"><span class="comment"># base_name指定生成的文件名 or 文件路径，默认在当前文件夹下，去除扩展名</span></span><br><span class="line"><span class="comment"># format：归档格式，root_dir 可指定目录路径，base_dir可指定文件/目录路径（默认可以基于root_dir扩展）</span></span><br><span class="line"><span class="comment"># dry_run=True，则不会创建归档文件，但将要被执行的操作会被记录到 logger</span></span><br><span class="line"><span class="comment"># owner 和 group 将在创建 tar 归档文件时被使用。默认会使用当前的所有者和分组</span></span><br><span class="line"><span class="comment"># logger 必须是一个兼容 PEP 282 的对象，通常为logging.Logger 的实例</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">shutil.make_archive(<span class="string">&#x27;output_filename&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>,<span class="string">&#x27;dir_name&#x27;</span>,<span class="string">&#x27;file_name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该<a href="http://www.seanbehan.com/how-to-use-python-shutil-make_archive-to-zip-up-a-directory-recursively-including-the-root-folder/">链接</a>可加深<code>shutil.make_archive()</code>理解</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_archive</span>(<span class="params">source, destination</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;让make_archive更易于使用&#x27;&#x27;&#x27;</span></span><br><span class="line">    base = os.path.basename(destination)</span><br><span class="line">    name = base.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">format</span> = base.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    archive_from = os.path.dirname(source)</span><br><span class="line">    archive_to = os.path.basename(source.strip(os.sep))</span><br><span class="line">    print(source, destination, archive_from, archive_to)</span><br><span class="line">    shutil.make_archive(name, <span class="built_in">format</span>, archive_from, archive_to)</span><br><span class="line">    shutil.move(<span class="string">&#x27;%s.%s&#x27;</span>%(name,<span class="built_in">format</span>), destination)</span><br><span class="line"></span><br><span class="line">make_archive(<span class="string">&#x27;/path/to/folder&#x27;</span>, <span class="string">&#x27;/path/to/folder.zip&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="11-1-通过命令行进行谷歌地图检索"><a href="#11-1-通过命令行进行谷歌地图检索" class="headerlink" title="11.1 通过命令行进行谷歌地图检索"></a>11.1 通过命令行进行谷歌地图检索</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># 命令行打开谷歌地图搜索地名，解决中文地名方法源于：</span></span><br><span class="line"><span class="comment"># https://www.ptt.cc/bbs/Python/M.1566904299.A.076.html</span></span><br><span class="line"><span class="comment"># https://www.urlencoder.io/python/</span></span><br><span class="line"><span class="comment"># usage: python3 mapIt.py &#x27;地名&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    address = urllib.parse.quote(<span class="string">&#x27; &#x27;</span>.join(sys.argv[<span class="number">1</span>:]))</span><br><span class="line">    webbrowser.<span class="built_in">open</span>(<span class="string">&#x27;https://www.google.com/maps/place/&#x27;</span> + address)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于<code>urllib.parse</code>模块</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment">## 使用urllib.parse模块把中文转换成可被识别的模式，若不导入该模块，则不能查中文地名</span></span><br><span class="line"><span class="comment"># urllib.parse.quote(string, safe=’/’, encoding=None, errors=None)</span></span><br><span class="line"><span class="comment"># safe指定不转码的字符，默认&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">print(urllib.parse.quote(<span class="string">&#x27;/中国&#x27;</span>))</span><br><span class="line">print(urllib.parse.quote(<span class="string">&#x27;/中国&#x27;</span>,safe=<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;/中国&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<pre><code>/%E4%B8%AD%E5%9B%BD
%2F%E4%B8%AD%E5%9B%BD
b&#39;/\xe4\xb8\xad\xe5\x9b\xbd&#39;
</code></pre>
]]></content>
      <categories>
        <category>Book</category>
        <category>Python 编程快速上手 &amp; Python 基础教程</category>
        <category>随笔 &amp; 项目</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>M1踩坑配置简记</title>
    <url>/M1%E8%B8%A9%E5%9D%91%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="桌面配置"><a href="#桌面配置" class="headerlink" title="桌面配置"></a>桌面配置</h2><p>程序坞延迟关闭<br><code>defaults write com.apple.Dock autohide-delay -float 0 &amp;&amp; killall Dock</code></p>
<p>恢复<br><code>defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock</code></p>
<h2 id="将finder文件名中文改回英文"><a href="#将finder文件名中文改回英文" class="headerlink" title="将finder文件名中文改回英文"></a>将finder文件名中文改回英文</h2><p>重命名 or 删除 文件夹下的 <code>.localized</code> 即可</p>
<h2 id="Homebrew相关操作"><a href="#Homebrew相关操作" class="headerlink" title="Homebrew相关操作"></a>Homebrew相关操作</h2><p><code>brew —cache</code> 可获得缓存地址</p>
<p>不需要安装cask，直接brew进行安装，卡了我两小时 :(</p>
<h3 id="替换源"><a href="#替换源" class="headerlink" title="替换源"></a>替换源</h3><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华开源软件镜像站</a></p>
<h2 id="为Mac终端设置代理"><a href="#为Mac终端设置代理" class="headerlink" title="为Mac终端设置代理"></a>为Mac终端设置代理</h2><p><a href="https://blog.csdn.net/ai2000ai/article/details/80826299">https://blog.csdn.net/ai2000ai/article/details/80826299</a></p>
<h2 id="更改Mac自带vim为brew安装的"><a href="#更改Mac自带vim为brew安装的" class="headerlink" title="更改Mac自带vim为brew安装的"></a>更改Mac自带vim为brew安装的</h2><p>以下两种方法皆可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">path=(‘<span class="regexp">/opt/</span>homebrew/bin’ <span class="variable">$path</span>)</span><br><span class="line">export path</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">alias vim=‘<span class="regexp">/opt/</span>homebrew<span class="regexp">/bin/</span>vim’</span><br></pre></td></tr></table></figure>

<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 设置代理</span></span><br><span class="line"><span class="comment"># 网站在http.和proxy之间即设置对该网站代理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http/https代理（全局）</span></span><br><span class="line">git config <span class="params">--global</span> http.proxy http:<span class="string">//127.0.0.1</span><span class="function">:1080</span></span><br><span class="line">git config <span class="params">--global</span> https.proxy https:<span class="string">//127.0.0.1</span><span class="function">:1080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># socks5代理</span></span><br><span class="line">git config <span class="params">--global</span> http.https:<span class="string">//github.com.proxy</span> socks5:<span class="string">//127.0.0.1</span><span class="function">:1186</span></span><br><span class="line">git config <span class="params">--global</span> https.https:<span class="string">//github.com.proxy</span> socks5:<span class="string">//127.0.0.1</span><span class="function">:1186</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 取消代理</span></span><br><span class="line">git config <span class="params">--global</span> <span class="params">--unset</span> http.proxy</span><br><span class="line">git config <span class="params">--global</span> <span class="params">--unset</span> https.proxy</span><br><span class="line">git config <span class="params">--global</span> <span class="params">--unset</span> https.https:<span class="string">//github.com.proxy</span></span><br><span class="line">git config <span class="params">--global</span> <span class="params">--unset</span> http.https:<span class="string">//github.com.proxy</span></span><br></pre></td></tr></table></figure>

<h2 id="github本身速度太慢"><a href="#github本身速度太慢" class="headerlink" title="github本身速度太慢"></a>github本身速度太慢</h2><p>在.com后面加上后缀，例：<a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org</a></p>
<h2 id="安装python3-7以使用旧版本的包"><a href="#安装python3-7以使用旧版本的包" class="headerlink" title="安装python3.7以使用旧版本的包"></a>安装python3.7以使用旧版本的包</h2><blockquote>
<p>软件:<br>Homebrew<br>Pycharm</p>
</blockquote>
<p>使用Python的时候发现之前用的包有两个没有适配M1和最新版本的Python，于是想着退回到之前使用Python3.7，再利用Pycharm重新开虚拟环境在里面进行包的安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install python@3.7</span><br></pre></td></tr></table></figure>
<p>等它安装完之后 <code>Copy</code> 下安装的位置，打开Pycharm，点击新建项目<br><img src="https://img-blog.csdnimg.cn/20210310200022508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyNjg0MQ==,size_16,color_FFFFFF,t_70" alt="新建项目"><br>找到python3.7的位置，点击右下角创建项目<br><img src="https://img-blog.csdnimg.cn/20210310200608547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyNjg0MQ==,size_16,color_FFFFFF,t_70" alt="创建环境"><br>进入pycharm后点击下方的终端，输入python3，此时可以发现版本已经是3.7了，exit()退出，然后就可以快乐的pip下载包了:)<br>    <img src="https://img-blog.csdnimg.cn/img_convert/8ff9939310240dddc85699f2fc8637de.png" alt="终端"></p>
<h2 id="在Pycharm配置Qt-Designer和PyUIC5"><a href="#在Pycharm配置Qt-Designer和PyUIC5" class="headerlink" title="在Pycharm配置Qt Designer和PyUIC5"></a>在Pycharm配置Qt Designer和PyUIC5</h2><h3 id="Qt-Designer"><a href="#Qt-Designer" class="headerlink" title="Qt Designer"></a>Qt Designer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install qt</span><br></pre></td></tr></table></figure>
<p>等待安装，copy安装路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew list qt | grep Designer.app</span><br></pre></td></tr></table></figure>
<p>我的路径是<code>/opt/homebrew/Cellar/qt/5.15.2/libexec/Designer.app</code>，根据命令行显示的结果往上滑把你自己的Designer.app文件夹 <code>copy</code> 下来，进入Pycharm， <code>cmd+,</code> 进入setting，工具-&gt;外部工具-&gt;点击+号<br><img src="https://i.loli.net/2021/03/11/H4m3D5ao986LVzr.png" alt="步骤"></p>
<p>如图填空<br><img src="https://img-blog.csdnimg.cn/20210311164857960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyNjg0MQ==,size_16,color_FFFFFF,t_70" alt="步骤二"></p>
<p>最后点击确定，在左上角的工具中打开Qt designer<br><img src="https://img-blog.csdnimg.cn/img_convert/ea73210278de4cc9ed3aa51fcfa4e1a9.png" alt="步骤三"><br>配置成功<br><img src="https://img-blog.csdnimg.cn/20210311154301615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyNjg0MQ==,size_16,color_FFFFFF,t_70" alt="结果"></p>
<h3 id="PyUIC5"><a href="#PyUIC5" class="headerlink" title="PyUIC5"></a>PyUIC5</h3><p>现在我们去找到PyUIC5并配置它</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> pyuic5</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我的路径</span></span><br><span class="line">/opt/homebrew/bin/pyuic5</span><br></pre></td></tr></table></figure>
<p>copy它，重复之前的步骤添加外部工具，我的参数配置：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -x 生成可执行的.py文件，当然你也可以去掉这个，-o 指定生成的文件名</span></span><br><span class="line">-x <span class="variable">$FileName</span><span class="variable">$ </span>-o <span class="variable">$FileNameWithoutExtension</span><span class="variable">$.</span>py</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210311164936202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyNjg0MQ==,size_16,color_FFFFFF,t_70" alt="配置"><br>现在就大功告成了，使用方法见下图<br><img src="https://img-blog.csdnimg.cn/20210311165249258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyNjg0MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="sublime配置"><a href="#sublime配置" class="headerlink" title="sublime配置"></a>sublime配置</h2><p>以下配置皆需要先<code>cmd+shift+p</code>搜索并安装package control，等一段时间在新的输入框输入install，回车跳转，然后等待新的输入框出现再进行下一步操作<br><img src="https://i.loli.net/2021/03/13/FnzDbSohfux61VZ.png" alt="图片"></p>
<h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><p>搜索并下载 virtualenv，等待左下角安装完成后<br><img src="https://i.loli.net/2021/03/11/hxpY5SkgZ7cFL4J.png" alt="切换"><br>输入 <code>cmd+shift+p</code> ，键入并选择Virtualenv:Avtivate，在之后给出的选项中选择已有的环境</p>
<h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><p>搜索chinese，安装 Chinese Localization，不出意外的话应该是第一个，安装完成后会弹出类似readme的界面，可以通过该点判断是否安装。</p>
<p>接着点击上方菜单栏中的Help，切换至中文即可<br><img src="https://i.loli.net/2021/03/13/DdgXl5SvseCcwY6.png" alt="图片"></p>
<h3 id="设置Python快捷键"><a href="#设置Python快捷键" class="headerlink" title="设置Python快捷键"></a>设置Python快捷键</h3><p>搜索sublimeREPL并安装，从菜单栏找到它的配置，具体见下图<br><img src="https://i.loli.net/2021/03/13/T4X3CdwoOb9S28P.png" alt="图片"><br>自下至上为其路径，根据你打开的文件夹寻找即可<br><img src="https://i.loli.net/2021/03/13/EO9YoXyuhksMtRb.png" alt="图片"></p>
<p>进入Python文件夹后，打开<code>Main.sublime-menu</code>，将文件所有<code>cmd</code>后的Python改为你自己的Python路径，因为我的电脑是M1，然后有些包不适配，就再安装了Python3.7，以下是我修改的路径是<code>/Users/home/PycharmProjects/pythonProject1/venv/bin/python</code>，仅供参考，一般只需要把它改成Python3即可，这里想法的由来源自<a href="https://zhuanlan.zhihu.com/p/121798647">知乎</a>，他的文章很有帮助，下面的代码块将以该作者的进行展示</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;-u&quot;</span>],</span><br><span class="line"><span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;pdb&quot;</span>, <span class="string">&quot;$file_basename&quot;</span>],</span><br><span class="line"><span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;$file_basename&quot;</span>],</span><br><span class="line"><span class="string">&quot;cmd&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;osx&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py&quot;</span>],</span><br><span class="line">    <span class="string">&quot;linux&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py&quot;</span>],</span><br><span class="line">    <span class="string">&quot;windows&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py&quot;</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>接下来需要配置快捷键，知乎的<a href="https://zhuanlan.zhihu.com/p/121798647">这篇文章</a>)配置的快捷键是无法运行的，或许是我版本的原因，这里给出可以运行的示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;keys&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;command+1&quot;</span></span><br><span class="line">    ],</span><br><span class="line">     <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;repl_open&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;caption&quot;</span>: <span class="string">&quot;Python - RUN current file&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;repl_python_run&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;mnemonic&quot;</span>: <span class="string">&quot;R&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cmd&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;$file_basename&quot;</span>],</span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$file_path&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;syntax&quot;</span>: <span class="string">&quot;Packages/Python/Python.tmLanguage&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;external_id&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;extend_env&quot;</span>: &#123;<span class="attr">&quot;PYTHONIOENCODING&quot;</span>: <span class="string">&quot;utf-8&quot;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;keys&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;command+2&quot;</span></span><br><span class="line">    ],</span><br><span class="line">     <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;repl_open&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;caption&quot;</span>: <span class="string">&quot;Python - IPython&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;repl_python_ipython&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;mnemonic&quot;</span>: <span class="string">&quot;I&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;encoding&quot;</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;autocomplete_server&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;cmd&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;osx&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py&quot;</span>],</span><br><span class="line">            <span class="attr">&quot;linux&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py&quot;</span>],</span><br><span class="line">            <span class="attr">&quot;windows&quot;</span>: [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;-u&quot;</span>, <span class="string">&quot;$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$file_path&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;syntax&quot;</span>: <span class="string">&quot;Packages/Python/Python.tmLanguage&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;external_id&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;extend_env&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;PYTHONIOENCODING&quot;</span>: <span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;SUBLIMEREPL_EDITOR&quot;</span>: <span class="string">&quot;$editor&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>如果not found报错，把python3路径改一下就可以</p>
<p>注意，此时快捷键command不能缩写为cmd，否则无法工作</p>
<p>现在使用快捷键运行后，会跳转到新界面，<del>不太习惯这种操作</del>，但是找了很久的配置发现无法修改，网上关于该点配置已经过时，不过可以通过分栏来提高浏览的舒适度Mac快捷键是<code>command+option+2</code>，此时呈现的效果还是很不错的<br><img src="https://i.loli.net/2021/03/13/cQ7W1Z6lgIRVDmA.png" alt="图片"></p>
<p>如果想把<code>command+b</code>（windows下是<code>ctrl+b</code>）改为同样的运行格式，你只需要在工具下新建编译系统即可，自定义名字<br><img src="https://i.loli.net/2021/03/13/jOwRVSvElKqThrg.png" alt="图片"></p>
<p>替换成下述代码，然后在工具下将编译系统切换成你刚定义的名字，使用快捷键<code>command+b</code>，此时运行效果同sublimeREPL，修改思路来自于<a href="https://stackoverflow.com/questions/19732006/how-to-run-python-code-on-sublimerepl/23722631#23722631">stackoverflow</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;run_existing_window_command&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;repl_python_run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;config/Python/Main.sublime-menu&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hexo + Next 踩坑配置记录</title>
    <url>/Hexo%E8%B8%A9%E5%9D%91%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>一番配置后深感付出与时间不成正比，缺乏css知识的情况下更是如此。再者选择Next的主题就是为了精简，故待后续有时间了再做配置更新。</p>
</blockquote>
<p>  以下<code>代码块</code>若未曾指定文件，默认命令行操作</p>
<h1 id="博客操作"><a href="#博客操作" class="headerlink" title="博客操作"></a>博客操作</h1><h2 id="增加新标签页"><a href="#增加新标签页" class="headerlink" title="增加新标签页"></a>增加新标签页</h2><ul>
<li>新增加的界面位于博客主目录下的 source 中</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> tags</span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> categories</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章&quot;</span></span><br></pre></td></tr></table></figure>
<p>此时创建的文章开头默认是没有categories的，设置成默认，打开<code>blog/scaffolds/post.md</code></p>
<figure class="highlight plain"><figcaption><span>blog/scaffolds/post.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>此时修改本地文章内容可以直接刷新界面看到更改 <del>一天后才发现</del> :)</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li>Next官方中文文档配置部分有些不适合更新的版本</li>
<li>中文的 language 设置应当为 zh-CN 而非 zh-Hans</li>
<li>网上大部分配置提到的路径为：<ul>
<li>博客配置文件<code>blog/_config.yml</code></li>
<li>主题配置文件<code>blog/themes/next/_config.yml</code></li>
</ul>
</li>
<li>现可<a href="https://github.com/iissnan/hexo-theme-next/issues/328">统一配置</a>在<code>blog/source/_data/next.yml</code>中，没有该目录则新建<br>将需要改变的地方<code>copy</code>至<code>next.yml</code>即可</li>
</ul>
<h2 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h2><h3 id="设置404界面"><a href="#设置404界面" class="headerlink" title="设置404界面"></a>设置<code>404</code>界面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page 404</span><br></pre></td></tr></table></figure>
<p>自定义<code>blog/source/404/index.md</code>即可</p>
<h3 id="更改代码块颜色"><a href="#更改代码块颜色" class="headerlink" title="更改代码块颜色"></a>更改代码块颜色</h3><p>在<code>blog/themes/next/source/css/_variables/base.styl</code>进行修改</p>
<h3 id="设置命令行快捷键以同步仓库"><a href="#设置命令行快捷键以同步仓库" class="headerlink" title="设置命令行快捷键以同步仓库"></a>设置命令行快捷键以同步仓库</h3><ul>
<li>因为没什么时间再去看别人博客学习更方便的同步方法，先挖个坑下半年再说<br>Mac系统<code>open -a xcode ~/.zshrc</code>，会vim用vim<br>将以下内容添加至<code>zsh</code>配置文件，<code>bash</code>一样，<code>alias</code>后是别名的设置，按自己需求改个顺手的就行</li>
</ul>
<figure class="highlight shell"><figcaption><span>~/.zshrc</span></figcaption><table><tr><td class="code"><pre><span class="line">alias bls=&quot;ls -h ~/Blog/source/_posts&quot; # 查看 blog 已有文章</span><br><span class="line">alias bv=&quot;vim ~/Blog/source/_posts&quot; # 编辑文章</span><br><span class="line">alias rab=&quot;ra ~/Blog/source/_posts&quot; # 利用 ranger 查看文件并打开，需下载 ranger，并设置别名 ra</span><br><span class="line">alias hn=&quot;</span><br><span class="line">cd ~/Blog # 创建文章</span><br><span class="line">hexo n &quot;</span><br><span class="line">alias hd=&quot; # 同步仓库</span><br><span class="line">cd ~/Blog</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">cd -</span><br><span class="line">&quot;</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure>


<h3 id="交换归档和首页的索引"><a href="#交换归档和首页的索引" class="headerlink" title="交换归档和首页的索引"></a>交换归档和首页的索引</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">archive_dir:</span> <span class="string">/</span> <span class="comment"># archives</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;archives&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="主题自带简单配置"><a href="#主题自带简单配置" class="headerlink" title="主题自带简单配置"></a>主题自带简单配置</h2><h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>创建文件夹存放图片</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span> <span class="comment"># 确认一下现在是否在博客目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line">mkdir images</span><br></pre></td></tr></table></figure>

<p>把图片放置在blog/source/images目录下</p>
<figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">url：/images/yourimage.jpg</span></span><br><span class="line"><span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment"># 修改头像图片为圆形</span></span><br><span class="line"><span class="comment"># opacity # 控制头像透明度 0-1</span></span><br><span class="line"><span class="attr">rotated:</span> <span class="literal">false</span> <span class="comment"># 鼠标移至是否会旋转</span></span><br></pre></td></tr></table></figure>

<h3 id="打开代码块复制功能"><a href="#打开代码块复制功能" class="headerlink" title="打开代码块复制功能"></a>打开代码块复制功能</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="关闭右下角back-to-top功能"><a href="#关闭右下角back-to-top功能" class="headerlink" title="关闭右下角back to top功能"></a>关闭右下角<code>back to top</code>功能</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="网站开始时间"><a href="#网站开始时间" class="headerlink" title="网站开始时间"></a>网站开始时间</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span></span><br></pre></td></tr></table></figure>
<h3 id="修改文章底部tags标识-gt-图标"><a href="#修改文章底部tags标识-gt-图标" class="headerlink" title="修改文章底部tags标识#-&gt;图标"></a>修改文章底部<code>tags</code>标识<code>#</code>-&gt;图标</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="增加字数统计-amp-时长估计"><a href="#增加字数统计-amp-时长估计" class="headerlink" title="增加字数统计 &amp; 时长估计"></a>增加字数统计 &amp; 时长估计</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


<h3 id="增加相关文章功能"><a href="#增加相关文章功能" class="headerlink" title="增加相关文章功能"></a>增加相关文章功能</h3><p>回到博客根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>


<figure class="highlight yml"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="comment"># 默认为相关文章</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Tips: 该功能以<code>tags</code>为参考</p>
<h3 id="关闭侧栏目录数字编号"><a href="#关闭侧栏目录数字编号" class="headerlink" title="关闭侧栏目录数字编号"></a>关闭侧栏目录数字编号</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span>  <span class="comment"># 关闭目录中的数字编号</span></span><br></pre></td></tr></table></figure>
<h3 id="icon-替换"><a href="#icon-替换" class="headerlink" title="icon 替换"></a>icon 替换</h3><p>去 <a href="http://www.fontawesome.com.cn/faicons/">Font Awesome 官网</a> 找对应代码</p>
<h3 id="关闭动态效果"><a href="#关闭动态效果" class="headerlink" title="关闭动态效果"></a>关闭动态效果</h3><figure class="highlight yml"><figcaption><span>blog/source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="string">enable:false</span></span><br></pre></td></tr></table></figure>

<h1 id="搭建参考"><a href="#搭建参考" class="headerlink" title="搭建参考"></a>搭建参考</h1><p><a href="https://www.jianshu.com/p/f054333ac9e6">hexo的next主题个性化教程:打造炫酷网站</a><br><a href="http://theme-next.iissnan.com/">Next官方中文文档</a><br><a href="https://theme-next.js.org/">next官方文档</a></p>
<p><a href="https://guanqr.com/tech/website/hexo-theme-next-customization">Hexo-NexT 主题个性优化</a><br><a href="http://yearito.cn/posts/hexo-get-started.html">Hexo 搭建个人博客系列：基础建站篇</a></p>
]]></content>
      <categories>
        <category>配置</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git随笔</title>
    <url>/Git%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<blockquote>
<p>环境 &amp; 教程：<br>  macOS Big Sur 11.2.1（m1）<br>  <a href="https://www.bootcss.com/p/git-guide/">Git 使用简易指南(含安装)</a><br>  <a href="https://learngitbranching.js.org/?NODEMO=&locale=zh_CN">在线网站实操(强烈推荐)</a><br>  <a href="https://git-scm.com/book/zh/v2">Pro Git 官方中文教程(推荐)</a></p>
</blockquote>
<hr>
<p>  <a href="https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1">直观的动画演示</a></p>
<ul>
<li>关于在线网站实操的快捷操作:<ul>
<li>点击右边动画可以查看对应的简单命令</li>
<li>levels 可以查看并选择关卡<ul>
<li>level intro1 快速跳转到第一关</li>
<li>show goal 查看当前目标</li>
<li>hide goal 或点击画面隐藏目标</li>
<li>objective 查看当前关卡提示</li>
<li>undo 撤销 reset重做</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul>
<li>分布式版本控制: 每个人的电脑都是一个完整的版本库，可离线本地提交，联网时再push，不因服务器损坏或网络问题造成工作停止</li>
<li>若对某个命令感兴趣，如<code>git checkout</code>，在命令行下输入<code>man git-checkout</code>，你会发现一切变得简单起来</li>
</ul>
<h1 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h1><ul>
<li>未追踪(untracked)</li>
<li>已追踪(tracked)<ul>
<li>已修改(modified)<ul>
<li>表示修改了文件，但还没保存到数据库</li>
</ul>
</li>
<li>已暂存(staged)<ul>
<li>表示对一个文件的当前版本做了标记，使其包含在下次提交的快照中</li>
</ul>
</li>
<li>已提交(commited)<ul>
<li>表示数据已经保存在本地数据库中</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>已追踪下的三个状态对应了Git项目中的三个阶段: 工作区、暂存区以及 Git 目录。<br><img src="https://i.loli.net/2021/03/09/f8H4DqR3AQSIZwT.png" alt="工作区、暂存区以及 Git 目录"></p>
<p>尚处于未跟踪(untracked)状态的某种意义来讲不属于上图叙述的工作区。可以把暂存区中的文件理解为下次将提交至仓库的文件，单纯的语言有些枯燥，不妨往下面看看，命令的反馈或许给你带来一些感触。<br><img src="https://i.loli.net/2021/03/13/XMci16uBIJTmUPv.png" alt="图片"></p>
<h2 id="查看配置-amp-配置基础信息"><a href="#查看配置-amp-配置基础信息" class="headerlink" title="查看配置 &amp; 配置基础信息"></a>查看配置 &amp; 配置基础信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -l <span class="comment"># 查看所有配置</span></span><br><span class="line">git config --system -l <span class="comment"># 系统配置</span></span><br><span class="line">git config --global -l <span class="comment"># 全局配置</span></span><br><span class="line">git config --user.name <span class="string">&quot;yourname&quot;</span> <span class="comment"># 配置你的用户名和邮件地址，这很重要</span></span><br><span class="line">git config --user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<p>我个人的配置文件在<code>~/.gitconfig</code>，其内容与<code>--global</code>查看到的内容一致</p>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>命令会基于创建在家目录下的<code>~/notes</code>进行阐述<del>假设你创建了</del>，当然，你也可以在你的桌面上新建一个文件夹，叫什么都行。</p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><h4 id="在需要版本控制的目录下初始化本地仓库"><a href="#在需要版本控制的目录下初始化本地仓库" class="headerlink" title="在需要版本控制的目录下初始化本地仓库"></a>在需要版本控制的目录下初始化本地仓库</h4><p>现在你想对的notes进行版本控制，只需切换到对应文件夹，初始化仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/notes</span><br><span class="line">git init <span class="comment"># 文件路径可选，默认在当前文件夹下，此时会创建.git文件夹</span></span><br></pre></td></tr></table></figure>

<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><p>现在来看看你的笔记里面有啥能放进仓库的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure>

<p>好的，什么都没有。来添加点东西，相信下面的命令你们都懂的，不懂百度～</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch English</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;English is very easy!&quot;</span> &gt;&gt; English</span><br></pre></td></tr></table></figure>

<p>再输入<code>git status</code>看看有什么变化:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">	English</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure>
<p>提示有一个未跟踪的文件English，使用git add进行跟踪</p>
<p>或许你会觉得命令的输出有些长，可以使用<code>git status -s</code> or <code>git status --short</code>缩短命令输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status -s</span><br></pre></td></tr></table></figure>

<p>你会得到一段非常简短的反馈</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">??</span> English</span><br></pre></td></tr></table></figure>
<p>??表示该文件为新添加的未跟踪文件</p>
<h4 id="将文件增加到下次提交序列"><a href="#将文件增加到下次提交序列" class="headerlink" title="将文件增加到下次提交序列"></a>将文件增加到下次提交序列</h4><p>git add指令实际上是一个多功能指令，但先不展开介绍，先处理English</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add English</span><br></pre></td></tr></table></figure>

<p>似乎没有任何反馈，不用担心，用<code>git status</code>看看就好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">	new file:   English</span><br></pre></td></tr></table></figure>

<p>可以看到English文件已经处于暂存区了，此时使用<code>git restore --staged &lt;file&gt;</code>可以移出暂存区，变为不跟踪的状态<del>当然不移了</del>。<br>来给英语笔记添加点内容，然后看看变化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;My English is very poor&quot;</span> &gt;&gt; English</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">	new file:   English</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">	modified:   English</span><br></pre></td></tr></table></figure>
<p>提示English发生了改变，但是不在暂存区，用git add把它加到暂存区（下一次提交的队列），或者git restore 丢弃此次更改。</p>
<p>此时你可能有点好奇简短的输出是什么样子的，让我们输入<code>git status -s</code>看看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AM English</span><br></pre></td></tr></table></figure>
<p>引入<code>-</code>和<code>+</code>来方便讲解，此时<code>??</code>-&gt;<code>AM</code>，我们将<code>-s</code>输出的类型分为两栏，左边的是暂存区的状态，右边是工作区的状态。看一下上面未缩减的输出可以发现，此时存在两个English笔记，对应于缩减的输出可以理解为AM的A表示有同名的文件暂存了，M表示后来修改过的文件没有暂存，有没有觉得<code>-s</code>的输出短小精悍</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-?? English</span></span><br><span class="line"><span class="addition">+AM English</span></span><br></pre></td></tr></table></figure>



<h4 id="git-diff查看修改"><a href="#git-diff查看修改" class="headerlink" title="git diff查看修改"></a>git diff查看修改</h4><p>假设此时你不太记得更改了什么</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p>温馨提示，按q退出</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/English b/English</span></span><br><span class="line"><span class="comment">index e69de29..82b9f44 100644</span></span><br><span class="line"><span class="comment">--- a/English</span></span><br><span class="line"><span class="comment">+++ b/English</span></span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line"><span class="addition">+My English is very poor</span></span><br><span class="line">(END)</span><br></pre></td></tr></table></figure>
<p>高亮的那一行就是你添加的内容<del>你英语不好</del></p>
<h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="创建和切换"><a href="#创建和切换" class="headerlink" title="创建和切换"></a>创建和切换</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch <span class="comment"># 查看本地分支</span></span><br><span class="line">git branch -r <span class="comment"># 查看远程(remote)分支</span></span><br><span class="line">git branch [branch_name] <span class="comment"># 建立分支</span></span><br><span class="line">git branch -d [branch_name] <span class="comment"># 删除分支</span></span><br><span class="line">git checkout [branch_name] <span class="comment"># 切换分支</span></span><br><span class="line">git checkout -b [branch_name] <span class="comment"># 创建分支并切换过去</span></span><br></pre></td></tr></table></figure>

<h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>若你现在建立了两个分支，一个<code>main</code>，一个是<code>bugFix</code>，两个分支都各自对文件进行了部分修改，此时你想合并修改看是否符合预期。<br><img src="https://i.loli.net/2021/03/09/ejOp2ik54CnmutM.png" alt="合并前"></p>
<p>使用<code>git status</code>可以查看当前分支,假设<code>main</code>为当前所在分支。</p>
<h5 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h5><p>把修改拉过来</p>
<p>用<code>git merge bugFix</code>则可将<code>bugFix</code>修改的记录合并至<code>main</code>，此时main包含了所有的修改，但注意，<code>bugFix</code>没有，应使用<code>git checkout bugFix; git merge main</code>切换至<code>bugFix</code>分支并再次合并。<br>若你对此缺少主观的印象，建议点击该<a href="https://learngitbranching.js.org/?NODEMO=&locale=zh_CN">网站</a>，输入<code>level intro3</code>。<br><img src="https://i.loli.net/2021/03/09/f2g3hntyZJuGFme.png" alt="merge"></p>
<h5 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h5><p>让修改看起来是顺序开发的<br>命令: <code>git rebase bugFix</code></p>
<p><img src="https://i.loli.net/2021/03/09/473CXz12cA6JPnH.png" alt="rebase"></p>
<h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>将不需要提交的文件加入<code>.gitignore</code>文件中<br><code>忽略文件</code>的规则：</p>
<ul>
<li><code>#</code> 注释</li>
<li>可采用通配符</li>
<li><code>!</code> 取反</li>
<li><code>/home</code> 表示只忽略当前文件夹下 <code>home</code> 文件，不包括其他目录下的home</li>
<li><code>dir_name/</code> 忽略任何目录下名为<code>dir_name</code>的文件夹</li>
</ul>
<h4 id="克隆远程-remote-仓库"><a href="#克隆远程-remote-仓库" class="headerlink" title="克隆远程(remote)仓库"></a>克隆远程(remote)仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> url [file_name] <span class="comment"># 文件路径可选，默认到当前文件夹下</span></span><br></pre></td></tr></table></figure>
<p>若出现403错误，检查钥匙串是否有两个账号，<code>更改/删除</code>另一个账号</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h2 id="码云公钥生成"><a href="#码云公钥生成" class="headerlink" title="码云公钥生成"></a>码云公钥生成</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen</span><br><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub <span class="comment"># 已拷贝至剪切板，直接黏贴即可</span></span><br></pre></td></tr></table></figure>
<p><code>copy</code>至<a href="https://gitee.com/profile/sshkeys%E4%B8%8B%E5%8D%B3%E5%8F%AF">https://gitee.com/profile/sshkeys下即可</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/u010566681/article/details/53183146">详解Github的.gitignore忽略文件+.gitignore不生效解决方案+生产配置大奉送</a></p>
<p><a href="https://blog.csdn.net/j15533415886/article/details/108185073">MAC 生成SSH公钥</a></p>
]]></content>
      <categories>
        <category>Git &amp; Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
